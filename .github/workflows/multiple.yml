name: Build Multiple Static Portal

on:
  workflow_dispatch:
    inputs:
      portalName:
        description: 'Optional: Select a specific portal to build'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - admin
          - user

jobs:
  build-portal:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Determine build files
        id: detect
        run: |
          input="${{ github.event.inputs.portalName }}"
          echo "Selected input: '$input'"

          build_files=()

          if [[ -n "$input" ]]; then
            candidate="${input}-APIMATIC-BUILD.json"
            if [[ -f "$candidate" ]]; then
              build_files+=("$candidate")
            elif [[ -f "APIMATIC-BUILD.json" ]]; then
              echo "‚ö†Ô∏è '${candidate}' not found. Using fallback 'APIMATIC-BUILD.json'"
              build_files+=("APIMATIC-BUILD.json")
            else
              echo "‚ùå No matching input or fallback file found."
              exit 1
            fi
          else
            mapfile -t build_files < <(find . -maxdepth 1 -name '*-APIMATIC-BUILD.json' | sort)
            if [[ ${#build_files[@]} -eq 0 && -f "APIMATIC-BUILD.json" ]]; then
              build_files=("APIMATIC-BUILD.json")
            elif [[ ${#build_files[@]} -eq 0 ]]; then
              echo "‚ùå No build input files found."
              exit 1
            fi
          fi

          echo "Found ${#build_files[@]} build files:"
          printf "%s\n" "${build_files[@]}"

          # Write to a file for next step
          printf "%s\n" "${build_files[@]}" > build_list.txt

      - name: Build and upload artifacts
        run: |
          while read file; do
            [ -z "$file" ] && continue
            echo "üîß Building from: $file"

            workdir=$(mktemp -d)
            cp "$file" "$workdir/"
            (cd "$workdir" && zip -qq -r input.zip .)

            curl -X POST \
              --url 'https://api.apimatic.io/portal' \
              -H 'Authorization:X-Auth-Key ${{ secrets.API_KEY }}' \
              -F "file=@$workdir/input.zip" \
              -o "$workdir/output.zip"

            name=$(basename "$file" -APIMATIC-BUILD.json)
            [ "$file" == "APIMATIC-BUILD.json" ] && name="default"

            mv "$workdir/output.zip" "$name-portal.zip"

            echo "‚úÖ Built and saved: $name-portal.zip"

            rm -rf "$workdir"
          done < build_list.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: portals
          path: '*-portal.zip'
