name: Build Static Portal

on:
  workflow_dispatch:
    inputs:
      portalName:
        description: 'Optional: Portal to build (e.g. admin, user)'
        required: false
        default: ''
        type: string

jobs:
  build-portal:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Detect which portals to build
        id: detect
        run: |
          input="${{ github.event.inputs.portalName }}"
          echo "Input portal: $input"

          build_files=()

          if [[ -n "$input" ]]; then
            # Specific input case
            candidate="${input}-APIMATIC-BUILD.json"
            if [[ -f "$candidate" ]]; then
              build_files+=("$candidate")
            elif [[ -f "APIMATIC-BUILD.json" ]]; then
              build_files+=("APIMATIC-BUILD.json")
            else
              echo "‚ùå No matching file found for input: $input"
              exit 1
            fi
          else
            # No input case ‚Äî find all build files
            mapfile -t build_files < <(find . -maxdepth 1 -name '*-APIMATIC-BUILD.json' | sort)
            if [[ ${#build_files[@]} -eq 0 && -f "APIMATIC-BUILD.json" ]]; then
              build_files=("APIMATIC-BUILD.json")
            elif [[ ${#build_files[@]} -eq 0 ]]; then
              echo "‚ùå No build files found."
              exit 1
            fi
          fi

          # Save the list of build files for the next step
          echo "files_to_build<<EOF" >> $GITHUB_OUTPUT
          printf "%s\n" "${build_files[@]}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Loop over build files and build/upload artifacts
        run: |
          echo "${{ steps.detect.outputs.files_to_build }}" | while read file; do
            [ -z "$file" ] && continue
            echo "üì¶ Building for: $file"

            temp_dir=$(mktemp -d)
            cp "$file" "$temp_dir/"

            pushd "$temp_dir" > /dev/null
            zip -qq -r input.zip .
            popd > /dev/null

            # Call APIMatic
            curl -X POST \
              --url 'https://api.apimatic.io/portal' \
              -H 'Authorization:X-Auth-Key ${{ secrets.API_KEY }}' \
              -F "file=@${temp_dir}/input.zip" \
              -o "${temp_dir}/output.zip"

            # Extract base name (e.g. admin from admin-APIMATIC-BUILD.json)
            base=$(basename "$file")
            name="${base%%-*}"
            [ "$base" == "APIMATIC-BUILD.json" ] && name="default"

            # Upload artifact
            echo "Uploading artifact: ${name}-portal"
            gh run upload-artifact "${name}-portal" "${temp_dir}/output.zip"

            rm -rf "$temp_dir"
          done

        env:
          GH_TOKEN: ${{ github.token }}
